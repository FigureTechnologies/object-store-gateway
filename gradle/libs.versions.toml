[versions]
bouncyCastle = "1.70"
exposed = "0.37.3"
grpc = "1.45.1"
grpcSpringboot = "3.4.3"
hikariCP = "5.0.1"
jackson = "2.12.5"
jacksonProtobuf = "0.9.12"
jwt = "3.19.2"
kotlin = "1.6.10"
kotlinCoroutines = "1.5.2"
kotlinLogging = "2.1.21"
mockk = "1.12.3"
okHttp = "4.9.1"
postgres = "42.3.3"
protobuf = "3.19.1"
provenanceClient = "1.0.5"
provenanceEventStream = "0.6.0-rc9"
provenanceHdWallet = "0.1.15"
provenanceProto = "1.8.0-rc10"
provenanceScope = "0.4.9"
scarlet = "0.1.12"
sqLite = "3.36.0.3"

[libraries]
bcProv = { module = "org.bouncycastle:bcprov-jdk15on", version.ref = "bouncyCastle" }
grpcProtobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc" }#, exclude = listOf("com.google.protobuf:protobuf-java", "com.google.protobuf:protobuf-java-util")).include()
grpcStub = { module = "io.grpc:grpc-stub", version.ref = "grpc" }
grpcSpringbootStarter = { module = "io.github.lognet:grpc-spring-boot-starter", version.ref = "grpcSpringboot" }
grpcNetty = { module = "io.grpc:grpc-netty-shaded", version.ref = "grpc" }
kotlinModule = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
protobufModule = { module = "com.hubspot.jackson:jackson-datatype-protobuf", version.ref = "jacksonProtobuf" }
allOpen = { module = "org.jetbrains.kotlin:kotlin-allopen", version.ref = "kotlin" }
coroutinesCoreJvm = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm", version.ref = "kotlinCoroutines" }
coroutinesReactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "kotlinCoroutines" }
coroutinesJdk8 = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8", version.ref = "kotlinCoroutines" }
coroutinesSLF4J = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j", version.ref = "kotlinCoroutines" }
reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
stdLibJdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin" }
kotlinLogging = { module = "io.github.microutils:kotlin-logging-jvm", version.ref = "kotlinLogging" }
okHttp3 = { module = "com.squareup.okhttp3:okhttp", version.ref = "okHttp" }
protobufJava = { module = "com.google.protobuf:protobuf-java", version.ref = "protobuf" }
protobufJavaUtil = { module = "com.google.protobuf:protobuf-java-util", version.ref = "protobuf" }
provenanceEventStreamApi = { module = "io.provenance.eventstream:es-api", version.ref = "provenanceEventStream" }
provenanceEventStreamApiModel = { module = "io.provenance.eventstream:es-api-model", version.ref = "provenanceEventStream" }
provenanceEventStreamCli = { module = "io.provenance.eventstream:es-cli", version.ref = "provenanceEventStream" }
provenanceEventStreamCore = { module = "io.provenance.eventstream:es-core", version.ref = "provenanceEventStream" }
provenanceGrpcClient = { module = "io.provenance.client:pb-grpc-client-kotlin", version.ref = "provenanceClient" }
provenanceHdWallet = { module = "io.provenance.hdwallet:hdwallet", version.ref = "provenanceHdWallet" }
provenanceProto = { module = "io.provenance:proto-kotlin", version.ref = "provenanceProto" }
scopeSdk = { module = "io.provenance.scope:sdk", version.ref = "provenanceScope" }
scopeSdkProto = { module = "io.provenance.scope:proto", version.ref = "provenanceScope" } # don't include by default
scopeUtil = { module = "io.provenance.scope:util", version.ref = "provenanceScope" }
messageAdapterMoshi = { module = "com.tinder.scarlet:message-adapter-moshi", version.ref = "scarlet"}
scarlet = { module = "com.tinder.scarlet:scarlet", version.ref = "scarlet"}
streamAdapterCoroutines = { module = "com.tinder.scarlet:stream-adapter-coroutines", version.ref = "scarlet" }
webSocketOkHttp = { module = "com.tinder.scarlet:websocket-okhttp", version.ref = "scarlet" } # exclude = listOf("com.squareup.okhttp3:okhttp")}
springBootAutoConfigure = { module = "org.springframework.boot:spring-boot-autoconfigure" }
springBootStarter = { module = "org.springframework.boot:spring-boot-starter" }
springBootStarterActuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
springBootStarterAOP = { module = "org.springframework.boot:spring-boot-starter-aop" }
springBootStarterJetty = { module = "org.springframework.boot:spring-boot-starter-jetty" }
springBootStarterWeb = { module = "org.springframework.boot:spring-boot-starter-web" }
exposedCore = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposed" }
exposedDao = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "exposed" }
exposedJdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposed" }
postgres = { module = "org.postgresql:postgresql", version.ref = "postgres" }
hikariCP = { module = "com.zaxxer:HikariCP", version.ref = "hikariCP" }
sqLite = { module = "org.xerial:sqlite-jdbc", version.ref = "sqLite" }
kotlinTest = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
starterTest = { module = "org.springframework.boot:spring-boot-starter-test" }
javaJwt = { module = "com.auth0:java-jwt", version.ref = "jwt" }

[bundles]
bouncyCastle = ["bcProv"]
grpc = ["grpcProtobuf", "grpcStub", "grpcSpringbootStarter", "grpcNetty"]
jackson = ["kotlinModule", "protobufModule"]
kotlin = ["allOpen","coroutinesCoreJvm","coroutinesReactor","coroutinesJdk8","coroutinesSLF4J","reflect","stdLibJdk8"]
logging = ["kotlinLogging"]
okhttp = ["okHttp3"]
protobuf = ["protobufJava", "protobufJavaUtil"]
provenance = ["provenanceEventStreamApi", "provenanceEventStreamApiModel", "provenanceEventStreamCli", "provenanceEventStreamCore", "provenanceGrpcClient", "provenanceHdWallet", "provenanceProto", "scopeSdk", "scopeUtil"]
scarlet = ["messageAdapterMoshi", "scarlet", "streamAdapterCoroutines", "webSocketOkHttp"]
springboot = ["springBootAutoConfigure", "springBootStarter", "springBootStarterActuator", "springBootStarterAOP", "springBootStarterJetty", "springBootStarterWeb"]
exposed = ["exposedCore", "exposedDao", "exposedJdbc", "postgres", "hikariCP", "sqLite"]
testKotlin = ["kotlinTest", "mockk"]
testSpringBoot = ["starterTest"]
jwt = ["javaJwt"]
