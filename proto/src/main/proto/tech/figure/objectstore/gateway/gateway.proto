syntax = "proto3";

package tech.figure.objectstore.gateway;

import 'public_key.proto';

service Gateway {
  rpc FetchObject (FetchObjectRequest) returns (FetchObjectResponse) {};
  rpc PutObject (PutObjectRequest) returns (PutObjectResponse) {};
  rpc RegisterExistingObject (RegisterExistingObjectRequest) returns (RegisterExistingObjectResponse) {};
  rpc FetchObjectByHash (FetchObjectByHashRequest) returns (FetchObjectByHashResponse) {};
  rpc GrantObjectPermissions (GrantObjectPermissionsRequest) returns (GrantObjectPermissionsResponse) {};
  rpc BatchGrantObjectPermissions (BatchGrantObjectPermissionsRequest) returns (stream GrantObjectPermissionsResponse) {};
  rpc RevokeObjectPermissions (RevokeObjectPermissionsRequest) returns (RevokeObjectPermissionsResponse) {};
  rpc GrantScopePermission (GrantScopePermissionRequest) returns (GrantScopePermissionResponse) {};
  rpc BatchGrantScopePermission (BatchGrantScopePermissionRequest) returns (BatchGrantScopePermissionResponse) {};
  rpc RevokeScopePermission (RevokeScopePermissionRequest) returns (RevokeScopePermissionResponse) {};
}

message FetchObjectRequest {
  string scope_address = 1;
  string granter_address = 2; // optional
}

message FetchObjectResponse {
  string scope_id = 1;
  repeated Record records = 2;
}

message PutObjectRequest {
  ObjectWithMeta object = 1;
  repeated io.provenance.scope.PublicKey additional_audience_keys = 2;
  bool use_requester_key = 3;
}

message PutObjectResponse {
  string hash = 1; // base64-encoded object hash (sha-256 of provided ObjectWithMeta [object] serialized proto)
}

/**
 * Allows registering pre-existing object-store objects so that they may be fetched and managed in the same way as objects stored via
 * the PutObject route
 */
message RegisterExistingObjectRequest {
  string hash = 1; // the hash of the object in object store (the caller's access to this object will be verified during the course of this call)
  repeated string grantee_address = 2; // addresses that should have access to fetch this object via the FetchObjectByHash rpc
}

message RegisterExistingObjectResponse {
    RegisterExistingObjectRequest request = 1;
}

message FetchObjectByHashRequest {
  string hash = 1;
}

message FetchObjectByHashResponse {
  ObjectWithMeta object = 1;
}

message GrantObjectPermissionsRequest {
  string grantee_address = 1; // A bech32 account address. This grantee will receive an object grant for the target hash
  string hash = 2; // The hash of the object for which to grant permissions
}

message GrantObjectPermissionsResponse {
  string grantee_address = 1; // A bech32 account address. This grantee received an object grant for the target hash
  string hash = 2; // The hash of the object for which permissions were granted
}

message BatchGrantObjectPermissionsRequest {
  oneof grant_target {
    AllHashesObjectGrantTarget all_hashes = 1; // Specifies that all hashes submitted by the granter will receive an object grant
    SpecifiedHashesObjectGrantTarget specified_hashes = 2; // Specifies that all target hashes submitted by the granter will receive an object grant for the grantee
  }
}

message RevokeObjectPermissionsRequest {
  string hash = 1; // the hash of the object to revoke permissions for
  repeated string grantee_address = 2; // the addresses to revoke access to this hash for
}
message RevokeObjectPermissionsResponse {
  RevokeObjectPermissionsRequest request = 1;
}

message GrantScopePermissionRequest {
  string scope_address = 1; // A bech32 scope address. The account referenced by grantee_address will receive read permissions through this service to the scope's underlying records
  string grantee_address = 2; // A bech32 account address for which to grant read access to the scope's records
  string grant_id = 3; // An optional parameter that specifies a unique identifier by which to label the grant entry that will be created
}

message GrantScopePermissionResponse {
  GrantScopePermissionRequest request = 1; // The request that evoked this response
  string granter_address = 2; // The address that has read access to the requested scope's underlying records
  bool grant_accepted = 3; // If true, the grant was successfully added from the request
}

message BatchGrantScopePermissionRequest {
  string scope_address = 1; // A bech32 scope address.  The account referenced by each grantee's grantee_address will receive read permissions through this service to the scope's underlying records
  repeated ScopeGrantee grantees = 2; // Each grantee to receive scope permissions. Requests that do not include at least one record in this array, or requests containing invalid grantees will be rejected
}

message BatchGrantScopePermissionResponse {
  BatchGrantScopePermissionRequest request = 1; // The request that evoked this response
  repeated GrantScopePermissionResponse grant_responses = 2; // Details about each grant made in the batch
}

message RevokeScopePermissionRequest {
  string scope_address = 1; // A bech32 scope address.  All grants for this scope to the target grantee_address will be removed
  string grantee_address = 2; // A bech32 account address.  All grants that this account has received for the scope will be removed
  string grant_id = 3; // An optional parameter that specifies a unique identifier by which to target existing grant entries.  If this value is omitted, all grants (including those labeled with grant ids) will be removed for this scope/account combo
}

message RevokeScopePermissionResponse {
  RevokeScopePermissionRequest request = 1; // The request that evoked this response
  int32 revoked_grants_count = 2; // The amount of grants that the request successfully revoked
  bool revoke_accepted = 3; // If true, the revoke was successfully processed.  This indicates that the sender had the rights to make the request, even if zero grants were revoked based on the input
}

// Specifies that all hashes submitted by the granter will receive an object grant for the grantee
message AllHashesObjectGrantTarget {
  string grantee_address = 1; // A bech32 account address. Adds an object grant from the granter to all objects submitted by the granter
}

// Specifies that all target hashes submitted by the granter will receive an object grant for the grantee
message SpecifiedHashesObjectGrantTarget {
  string grantee_address = 1; // A bech32 account address. Adds an object grant from the granter to the target hashes
  repeated string target_hashes = 2; // All hashes for which to grant permissions
}

message ObjectWithMeta {
  bytes object_bytes = 1;
  string type = 2; // optional type
}

message ScopeGrantee {
  string grantee_address = 1; // A bech32 account address for which to grant read access to the scope's records
  string grant_id = 2; // An optional parameter that specifies a unique identifier by which to label the grant entry that will be created
}

// todo: figure out encryption scheme? (relying on TLS now)
//message EncryptedRecords {
//  bytes record_map = 1; // encrypted byte array of RecordMap
//}
//
//message RecordMap {
//  map<string, Record> records = 1;
//}

message Record {
  string name = 1;
  repeated RecordObject inputs = 2;
  repeated RecordObject outputs = 3;
}

message RecordObject {
  string hash = 1;
  string type = 2;
  bytes object_bytes = 3;
}
