[versions]
asset-model = "0.1.2"
bouncycastle = "1.70"
exposed = "0.37.3"
figure-eventstream = "0.9.1"
flyway = "8.0.2"
grpc = "1.57.2" # If updating this value, ensure to update the doc reference in the ClientConfig class
grpc-kotlin = "1.3.0"
grpc-springboot = "5.1.4"
hikari = "5.0.1"
jackson = "2.18.2"
jackson-protobuf = "0.9.13"
jwt = "3.19.4"
kotlin = "1.9.0"
kotlin-coroutines = "1.7.3"
# IMPORTANT: Kotlin Logging cannot be upgraded to version 3.x+ because Spring relies on an older set of logging libraries
# and the newer Kotlin Logging libraries mandate newer logging.  Spring will start exploding when the app launches in
# kube due to the slf4j remover.
kotlin-logging = "2.1.23"
mockk = "1.12.3"
okhttp = "4.9.1"
postgres = "42.3.3"
protobuf = "3.23.2"
provenance-blockapi = "0.2.1"
provenance-client = "1.3.0"
provenance-hdwallet = "0.1.15"
provenance-proto = "1.17.0"
provenance-scope = "0.7.0"
scarlet = "0.1.12"
springboot = "3.1.1"
sqlite = "3.42.0.0"
testcontainers = "1.17.3"

[libraries]
# Core
asset-model = { module = "io.provenance.model:metadata-asset-model", version.ref = "asset-model" }
bouncycastle = { module = "org.bouncycastle:bcprov-jdk15on", version.ref = "bouncycastle" }
coroutines-core-jvm = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm", version.ref = "kotlin-coroutines" }
coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "kotlin-coroutines" }
coroutines-jdk8 = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8", version.ref = "kotlin-coroutines" }
coroutines-slf4j = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j", version.ref = "kotlin-coroutines" }
exposed-core = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposed" }
exposed-dao = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "exposed" }
exposed-jdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposed" }
figure-eventstream-api = { module = "tech.figure.eventstream:es-api", version.ref = "figure-eventstream" }
figure-eventstream-api-model = { module = "tech.figure.eventstream:es-api-model", version.ref = "figure-eventstream" }
figure-eventstream-cli = { module = "tech.figure.eventstream:es-cli", version.ref = "figure-eventstream" }
figure-eventstream-core = { module = "tech.figure.eventstream:es-core", version.ref = "figure-eventstream" }
flyway = { module = "org.flywaydb:flyway-core", version.ref = "flyway" }
grpc-protobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc" }
grpc-stub = { module = "io.grpc:grpc-stub", version.ref = "grpc" }
grpc-kotlin-stub = { module = "io.grpc:grpc-kotlin-stub", version.ref = "grpc-kotlin" }
grpc-springboot-starter = { module = "io.github.lognet:grpc-spring-boot-starter", version.ref = "grpc-springboot" }
grpc-netty = { module = "io.grpc:grpc-netty", version.ref = "grpc" }
grpc-netty-shaded = { module = "io.grpc:grpc-netty-shaded", version.ref = "grpc" }
hikari = { module = "com.zaxxer:HikariCP", version.ref = "hikari" }
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jackson-module-protobuf = { module = "com.hubspot.jackson:jackson-datatype-protobuf", version.ref = "jackson-protobuf" }
java-jwt = { module = "com.auth0:java-jwt", version.ref = "jwt" }
kotlin-allopen = { module = "org.jetbrains.kotlin:kotlin-allopen", version.ref = "kotlin" }
kotlin-logging = { module = "io.github.microutils:kotlin-logging-jvm", version.ref = "kotlin-logging" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlin-stdlib-jdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin" }
okhttp3 = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
postgres = { module = "org.postgresql:postgresql", version.ref = "postgres" }
protobuf-java = { module = "com.google.protobuf:protobuf-java", version.ref = "protobuf" }
protobuf-java-util = { module = "com.google.protobuf:protobuf-java-util", version.ref = "protobuf" }
provenance-blockapi-client = { module = "tech.figure.block:api-client", version.ref = "provenance-blockapi" }
provenance-client = { module = "io.provenance.client:pb-grpc-client-kotlin", version.ref = "provenance-client" }
provenance-hdwallet = { module = "io.provenance.hdwallet:hdwallet", version.ref = "provenance-hdwallet" }
provenance-proto = { module = "io.provenance:proto-kotlin", version.ref = "provenance-proto" }
provenance-scope-sdk = { module = "io.provenance.scope:sdk", version.ref = "provenance-scope" }
provenance-scope-proto = { module = "io.provenance.scope:proto", version.ref = "provenance-scope" } # don't include by default
provenance-scope-util = { module = "io.provenance.scope:util", version.ref = "provenance-scope" }
scarlet-message-adapter-moshi = { module = "com.tinder.scarlet:message-adapter-moshi", version.ref = "scarlet" }
scarlet = { module = "com.tinder.scarlet:scarlet", version.ref = "scarlet"}
scarlet-stream-adapter-coroutines = { module = "com.tinder.scarlet:stream-adapter-coroutines", version.ref = "scarlet" }
scarlet-websocket-okhttp = { module = "com.tinder.scarlet:websocket-okhttp", version.ref = "scarlet" }
springboot-autoconfigure = { module = "org.springframework.boot:spring-boot-autoconfigure", version.ref = "springboot" }
springboot-starter = { module = "org.springframework.boot:spring-boot-starter", version.ref = "springboot" }
springboot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "springboot" }
springboot-starter-aop = { module = "org.springframework.boot:spring-boot-starter-aop", version.ref = "springboot" }
springboot-starter-jetty = { module = "org.springframework.boot:spring-boot-starter-jetty", version.ref = "springboot" }
springboot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "springboot" }
sqlite = { module = "org.xerial:sqlite-jdbc", version.ref = "sqlite" }

# Test
coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlin-coroutines" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
springboot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "springboot" }
testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-postgres = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }

[bundles]
database = ["exposed-core", "exposed-dao", "exposed-jdbc", "flyway", "hikari", "postgres", "sqlite"]
eventstream = ["figure-eventstream-api", "figure-eventstream-api-model", "figure-eventstream-cli", "figure-eventstream-core"]
grpc = ["grpc-netty", "grpc-netty-shaded", "grpc-protobuf", "grpc-stub", "grpc-kotlin-stub"]
jackson = ["jackson-module-kotlin", "jackson-module-protobuf"]
kotlin = ["coroutines-core-jvm", "coroutines-reactor", "coroutines-jdk8", "coroutines-slf4j", "kotlin-allopen", "kotlin-reflect", "kotlin-stdlib-jdk8"]
logging = ["kotlin-logging"]
protobuf = ["protobuf-java", "protobuf-java-util"]
provenance = ["provenance-client", "provenance-hdwallet", "provenance-proto", "provenance-scope-sdk", "provenance-scope-util"]
scarlet = ["scarlet", "scarlet-message-adapter-moshi", "scarlet-stream-adapter-coroutines", "scarlet-websocket-okhttp"]
springboot = ["springboot-autoconfigure", "springboot-starter", "springboot-starter-actuator", "springboot-starter-aop", "springboot-starter-jetty", "springboot-starter-web"]
test-kotlin = ["kotlin-test", "mockk"]
testcontainers = ["testcontainers", "testcontainers-postgres"]
